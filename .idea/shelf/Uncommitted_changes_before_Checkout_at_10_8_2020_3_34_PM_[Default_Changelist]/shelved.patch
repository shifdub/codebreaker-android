Index: app/src/main/java/edu/cnm/deepdive/codebreaker/controller/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.cnm.deepdive.codebreaker.controller;\n\nimport android.content.Intent;\nimport android.graphics.Color;\nimport android.os.Bundle;\nimport android.text.InputFilter;\nimport android.text.Spanned;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.widget.Toast;\nimport androidx.annotation.NonNull;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.lifecycle.ViewModelProvider;\nimport edu.cnm.deepdive.codebreaker.R;\nimport edu.cnm.deepdive.codebreaker.adapter.GuessAdapter;\nimport edu.cnm.deepdive.codebreaker.databinding.ActivityMainBinding;\nimport edu.cnm.deepdive.codebreaker.viewmodel.MainViewModel;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class MainActivity extends AppCompatActivity implements InputFilter {\n  private static final String INVALID_CHAR_PATTERN = String.format(\"[^%s]\", MainViewModel.POOL);\n  private static final int[] colorValues =\n      {Color.RED, 0xffffa500, Color.YELLOW, Color.GREEN, Color.BLUE, 0xff4b0082, 0xffee82ee};\n  private static final Map<Character, Integer> colorMap =\n      buildColorMap(MainViewModel.POOL.toCharArray(), colorValues);\n\n  private MainViewModel viewModel;\n  private GuessAdapter adapter;\n  private int codeLength;\n  private ActivityMainBinding binding;\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    binding = ActivityMainBinding.inflate(getLayoutInflater());\n    setContentView(binding.getRoot());\n    setupViews();\n    setupViewModel();\n  }\n\n  private void setupViewModel() {\n    adapter = new GuessAdapter(MainActivity.this, colorMap);\n    viewModel = new ViewModelProvider(this).get(MainViewModel.class);\n    viewModel.getGame().observe(this, (game) -> {\n      adapter.clear();\n      adapter.addAll(game.getGuesses());\n      binding.guessList.setAdapter(adapter);\n      binding.guessList.setSelection(adapter.getCount() - 1);\n      codeLength = game.getLength();\n      binding.guess.setText(\"\");\n    });\n    viewModel.getSolved().observe(this, solved ->\n        binding.guessControls.setVisibility(solved ? View.INVISIBLE :View.VISIBLE));\n    viewModel.getThrowable().observe(this, (throwable)-> {\n      if(throwable != null) {\n        Toast.makeText(this, throwable.getLocalizedMessage(), Toast.LENGTH_LONG).show();\n      }\n    });\n  }\n\n  private void setupViews() {\n    binding.guess.setFilters(new InputFilter[]{this});\n    binding.submit.setOnClickListener((view) -> recordGuess());\n\n  }\n\n\n  @Override\n  public boolean onCreateOptionsMenu(Menu menu) {\n    super.onCreateOptionsMenu(menu);\n    getMenuInflater().inflate(R.menu.main_options, menu);\n    return true;\n  }\n\n  @Override\n  public boolean onOptionsItemSelected(@NonNull MenuItem item) {\n    boolean handled = true;\n    switch (item.getItemId()) {\n      case R.id.new_game:\n        startGame();\n        break;\n      case R.id.restart_game:\n        restartGame();\n        break;\n      case R.id.settings:\n        Intent intent = new Intent(this, SettingsActivity.class);\n        startActivity(intent);\n        break;\n        default:\n        handled = super.onOptionsItemSelected(item);\n    }\n    return handled;\n  }\n\n  private void recordGuess() {\n    viewModel.guess(binding.guess.getText().toString().trim().toUpperCase());\n  }\n\n  private void startGame() {\n    viewModel.startGame();\n  }\n\n  private void restartGame() {\n    viewModel.restartGame();\n  }\n\n  private static Map<Character, Integer> buildColorMap(char[] chars, int[] values) {\n    Map<Character, Integer> colorMap = new HashMap<>();\n    for (int i = 0; i < chars.length; i++) {\n      colorMap.put(chars[i], values[i]);\n    }\n    return colorMap;\n  }\n\n  @Override\n  public CharSequence filter(CharSequence source, int sourceStart, int sourceEnd,\n      Spanned dest, int destStart, int destEnd) {\n    String modifiedSource = source.toString().toUpperCase().replaceAll(INVALID_CHAR_PATTERN, \"\");\n    StringBuilder builder = new StringBuilder(dest);\n    builder.replace(destStart, destEnd, modifiedSource);\n    if (builder.length() > codeLength) {\n      modifiedSource =\n          modifiedSource.substring(0, modifiedSource.length() - (builder.length() - codeLength));\n    }\n    int newLength = dest.length() - (destEnd - destStart) + modifiedSource.length();\n    binding.submit.setEnabled(newLength == codeLength);\n    return modifiedSource;\n  }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/edu/cnm/deepdive/codebreaker/controller/MainActivity.java	(revision 8d5f935ffc0bc53a885fa76ad1f152faefd88c2a)
+++ app/src/main/java/edu/cnm/deepdive/codebreaker/controller/MainActivity.java	(date 1602191496011)
@@ -1,72 +1,28 @@
 package edu.cnm.deepdive.codebreaker.controller;
 
 import android.content.Intent;
-import android.graphics.Color;
 import android.os.Bundle;
-import android.text.InputFilter;
-import android.text.Spanned;
 import android.view.Menu;
 import android.view.MenuItem;
-import android.view.View;
 import android.widget.Toast;
 import androidx.annotation.NonNull;
 import androidx.appcompat.app.AppCompatActivity;
 import androidx.lifecycle.ViewModelProvider;
 import edu.cnm.deepdive.codebreaker.R;
-import edu.cnm.deepdive.codebreaker.adapter.GuessAdapter;
-import edu.cnm.deepdive.codebreaker.databinding.ActivityMainBinding;
 import edu.cnm.deepdive.codebreaker.viewmodel.MainViewModel;
-import java.util.HashMap;
-import java.util.Map;
 
-public class MainActivity extends AppCompatActivity implements InputFilter {
-  private static final String INVALID_CHAR_PATTERN = String.format("[^%s]", MainViewModel.POOL);
-  private static final int[] colorValues =
-      {Color.RED, 0xffffa500, Color.YELLOW, Color.GREEN, Color.BLUE, 0xff4b0082, 0xffee82ee};
-  private static final Map<Character, Integer> colorMap =
-      buildColorMap(MainViewModel.POOL.toCharArray(), colorValues);
+public class MainActivity extends AppCompatActivity {
 
   private MainViewModel viewModel;
-  private GuessAdapter adapter;
-  private int codeLength;
-  private ActivityMainBinding binding;
+
 
   @Override
   protected void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
-    binding = ActivityMainBinding.inflate(getLayoutInflater());
-    setContentView(binding.getRoot());
-    setupViews();
+    setContentView(R.layout.activity_main);
     setupViewModel();
   }
 
-  private void setupViewModel() {
-    adapter = new GuessAdapter(MainActivity.this, colorMap);
-    viewModel = new ViewModelProvider(this).get(MainViewModel.class);
-    viewModel.getGame().observe(this, (game) -> {
-      adapter.clear();
-      adapter.addAll(game.getGuesses());
-      binding.guessList.setAdapter(adapter);
-      binding.guessList.setSelection(adapter.getCount() - 1);
-      codeLength = game.getLength();
-      binding.guess.setText("");
-    });
-    viewModel.getSolved().observe(this, solved ->
-        binding.guessControls.setVisibility(solved ? View.INVISIBLE :View.VISIBLE));
-    viewModel.getThrowable().observe(this, (throwable)-> {
-      if(throwable != null) {
-        Toast.makeText(this, throwable.getLocalizedMessage(), Toast.LENGTH_LONG).show();
-      }
-    });
-  }
-
-  private void setupViews() {
-    binding.guess.setFilters(new InputFilter[]{this});
-    binding.submit.setOnClickListener((view) -> recordGuess());
-
-  }
-
-
   @Override
   public boolean onCreateOptionsMenu(Menu menu) {
     super.onCreateOptionsMenu(menu);
@@ -77,55 +33,25 @@
   @Override
   public boolean onOptionsItemSelected(@NonNull MenuItem item) {
     boolean handled = true;
+    //noinspection SwitchStatementWithTooFewBranches
     switch (item.getItemId()) {
-      case R.id.new_game:
-        startGame();
-        break;
-      case R.id.restart_game:
-        restartGame();
-        break;
       case R.id.settings:
         Intent intent = new Intent(this, SettingsActivity.class);
         startActivity(intent);
         break;
-        default:
+      default:
         handled = super.onOptionsItemSelected(item);
     }
     return handled;
   }
 
-  private void recordGuess() {
-    viewModel.guess(binding.guess.getText().toString().trim().toUpperCase());
-  }
-
-  private void startGame() {
-    viewModel.startGame();
+  private void setupViewModel() {
+    viewModel = new ViewModelProvider(this).get(MainViewModel.class);
+    viewModel.getThrowable().observe(this, (throwable) -> {
+      if (throwable != null) {
+        Toast.makeText(this, throwable.getLocalizedMessage(), Toast.LENGTH_LONG).show();
+      }
+    });
   }
-
-  private void restartGame() {
-    viewModel.restartGame();
-  }
-
-  private static Map<Character, Integer> buildColorMap(char[] chars, int[] values) {
-    Map<Character, Integer> colorMap = new HashMap<>();
-    for (int i = 0; i < chars.length; i++) {
-      colorMap.put(chars[i], values[i]);
-    }
-    return colorMap;
-  }
 
-  @Override
-  public CharSequence filter(CharSequence source, int sourceStart, int sourceEnd,
-      Spanned dest, int destStart, int destEnd) {
-    String modifiedSource = source.toString().toUpperCase().replaceAll(INVALID_CHAR_PATTERN, "");
-    StringBuilder builder = new StringBuilder(dest);
-    builder.replace(destStart, destEnd, modifiedSource);
-    if (builder.length() > codeLength) {
-      modifiedSource =
-          modifiedSource.substring(0, modifiedSource.length() - (builder.length() - codeLength));
-    }
-    int newLength = dest.length() - (destEnd - destStart) + modifiedSource.length();
-    binding.submit.setEnabled(newLength == codeLength);
-    return modifiedSource;
-  }
 }
\ No newline at end of file
Index: app/src/main/java/edu/cnm/deepdive/codebreaker/controller/GameFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.cnm.deepdive.codebreaker.controller;\n\nimport android.content.Intent;\nimport android.graphics.Color;\nimport android.os.Bundle;\nimport android.text.InputFilter;\nimport android.text.Spanned;\nimport android.view.LayoutInflater;\nimport android.view.Menu;\nimport android.view.MenuInflater;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.Toast;\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\nimport androidx.fragment.app.Fragment;\nimport androidx.fragment.app.FragmentActivity;\nimport androidx.lifecycle.LifecycleOwner;\nimport androidx.lifecycle.ViewModelProvider;\nimport edu.cnm.deepdive.codebreaker.R;\nimport edu.cnm.deepdive.codebreaker.adapter.GuessAdapter;\nimport edu.cnm.deepdive.codebreaker.databinding.FragmentGameBinding;\nimport edu.cnm.deepdive.codebreaker.viewmodel.MainViewModel;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class GameFragment extends Fragment implements InputFilter{\n\n  private static final String INVALID_CHAR_PATTERN = String.format(\"[^%s]\", MainViewModel.POOL);\n  private static final int[] colorValues =\n      {Color.RED, 0xffffa500, Color.YELLOW, Color.GREEN, Color.BLUE, 0xff4b0082, 0xffee82ee};\n  private static final Map<Character, Integer> colorMap =\n      buildColorMap(MainViewModel.POOL.toCharArray(), colorValues);\n\n  private MainViewModel viewModel;\n  private GuessAdapter adapter;\n  private int codeLength;\n  private FragmentGameBinding binding;\n\n  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setHasOptionsMenu(true);\n  }\n  @Nullable\n  @Override\n  public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,\n      @Nullable Bundle savedInstanceState) {\n    binding = FragmentGameBinding.inflate(getLayoutInflater());\n    setupViews();\n    return binding.getRoot();\n  }\n\n  private void setupViewModel() {\n    FragmentActivity activity = getActivity();\n    //noinspection ConstantConditions\n    adapter = new GuessAdapter(activity, colorMap);\n\n    viewModel = new ViewModelProvider(activity).get(MainViewModel.class);\n    LifecycleOwner lifecycleOwner = getViewLifecycleOwner();\n    viewModel.getGame().observe(lifecycleOwner, (game) -> {\n      adapter.clear();\n      adapter.addAll(game.getGuesses());\n      binding.guessList.setAdapter(adapter);\n      binding.guessList.setSelection(adapter.getCount() - 1);\n      codeLength = game.getLength();\n      binding.guess.setText(\"\");\n    });\n    viewModel.getSolved().observe(lifecycleOwner, solved ->\n        binding.guessControls.setVisibility(solved ? View.INVISIBLE :View.VISIBLE));\n    viewModel.getThrowable().observe(lifecycleOwner, (throwable)-> {\n      if(throwable != null) {\n        Toast.makeText(activity, throwable.getLocalizedMessage(), Toast.LENGTH_LONG).show();\n      }\n    });\n  }\n\n  private void setupViews() {\n    binding.guess.setFilters(new InputFilter[]{this});\n    binding.submit.setOnClickListener((view) -> recordGuess());\n\n  }\n\n  @Override\n  public void onViewCreated(@NonNull  View view, @Nullable Bundle savedInstanceState) {\n    super.onViewCreated(view, savedInstanceState);\n    setupViewModel();\n  }\n\n  @Override\n  public void onCreateOptionsMenu(@NonNull Menu menu,@NonNull MenuInflater inflater) {\n    super.onCreateOptionsMenu(menu, inflater);\n    inflater.inflate(R.menu.game_options, menu);\n  }\n\n  @Override\n  public boolean onOptionsItemSelected(@NonNull MenuItem item) {\n    boolean handled = true;\n    switch (item.getItemId()) {\n      case R.id.new_game:\n        startGame();\n        break;\n      case R.id.restart_game:\n        restartGame();\n        break;\n        default:\n        handled = super.onOptionsItemSelected(item);\n    }\n    return handled;\n  }\n\n  private void recordGuess() {\n    viewModel.guess(binding.guess.getText().toString().trim().toUpperCase());\n  }\n\n  private void startGame() {\n    viewModel.startGame();\n  }\n\n  private void restartGame() {\n    viewModel.restartGame();\n  }\n\n  private static Map<Character, Integer> buildColorMap(char[] chars, int[] values) {\n    Map<Character, Integer> colorMap = new HashMap<>();\n    for (int i = 0; i < chars.length; i++) {\n      colorMap.put(chars[i], values[i]);\n    }\n    return colorMap;\n  }\n\n  @Override\n  public CharSequence filter(CharSequence source, int sourceStart, int sourceEnd,\n      Spanned dest, int destStart, int destEnd) {\n    String modifiedSource = source.toString().toUpperCase().replaceAll(INVALID_CHAR_PATTERN, \"\");\n    StringBuilder builder = new StringBuilder(dest);\n    builder.replace(destStart, destEnd, modifiedSource);\n    if (builder.length() > codeLength) {\n      modifiedSource =\n          modifiedSource.substring(0, modifiedSource.length() - (builder.length() - codeLength));\n    }\n    int newLength = dest.length() - (destEnd - destStart) + modifiedSource.length();\n    binding.submit.setEnabled(newLength == codeLength);\n    return modifiedSource;\n  }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/edu/cnm/deepdive/codebreaker/controller/GameFragment.java	(revision 8d5f935ffc0bc53a885fa76ad1f152faefd88c2a)
+++ app/src/main/java/edu/cnm/deepdive/codebreaker/controller/GameFragment.java	(date 1602190889159)
@@ -56,7 +56,6 @@
     FragmentActivity activity = getActivity();
     //noinspection ConstantConditions
     adapter = new GuessAdapter(activity, colorMap);
-
     viewModel = new ViewModelProvider(activity).get(MainViewModel.class);
     LifecycleOwner lifecycleOwner = getViewLifecycleOwner();
     viewModel.getGame().observe(lifecycleOwner, (game) -> {
@@ -69,12 +68,7 @@
     });
     viewModel.getSolved().observe(lifecycleOwner, solved ->
         binding.guessControls.setVisibility(solved ? View.INVISIBLE :View.VISIBLE));
-    viewModel.getThrowable().observe(lifecycleOwner, (throwable)-> {
-      if(throwable != null) {
-        Toast.makeText(activity, throwable.getLocalizedMessage(), Toast.LENGTH_LONG).show();
-      }
-    });
-  }
+    }
 
   private void setupViews() {
     binding.guess.setFilters(new InputFilter[]{this});
Index: app/src/main/res/layout-land/activity_main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout-land/activity_main.xml	(revision 8d5f935ffc0bc53a885fa76ad1f152faefd88c2a)
+++ app/src/main/res/layout-land/activity_main.xml	(revision 8d5f935ffc0bc53a885fa76ad1f152faefd88c2a)
@@ -1,51 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<androidx.constraintlayout.widget.ConstraintLayout
-  xmlns:android="http://schemas.android.com/apk/res/android"
-  xmlns:app="http://schemas.android.com/apk/res-auto"
-  xmlns:tools="http://schemas.android.com/tools"
-  android:layout_width="match_parent"
-  android:layout_height="match_parent"
-  tools:context=".controller.MainActivity">
-
-  <LinearLayout
-    android:id="@+id/guess_controls"
-    android:layout_width="0dp"
-    android:layout_height="0dp"
-    android:orientation="vertical"
-    android:padding="@dimen/hal_margin"
-    android:gravity="center"
-    app:layout_constraintStart_toStartOf="parent"
-    app:layout_constraintTop_toTopOf="parent"
-    app:layout_constraintBottom_toBottomOf="parent"
-    app:layout_constraintEnd_toStartOf="@id/guess_list"
-    app:layout_constraintHorizontal_weight="2">
-
-    <EditText
-      android:id="@+id/guess"
-      android:layout_width="match_parent"
-      android:layout_height="wrap_content"
-      android:layout_margin="@dimen/hal_margin"
-      android:inputType="textCapCharacters"
-      android:maxLength="4"
-      android:hint="@string/guess_hint"/>
-
-    <Button
-      android:id="@+id/submit"
-      android:layout_width="wrap_content"
-      android:layout_height="wrap_content"
-      android:layout_margin="@dimen/hal_margin"
-      android:text="@string/submit"/>
-
-  </LinearLayout>
-
-  <ListView
-    android:id="@+id/guess_list"
-    android:layout_width="0dp"
-    android:layout_height="0dp"
-    app:layout_constraintTop_toTopOf="parent"
-    app:layout_constraintEnd_toEndOf="parent"
-    app:layout_constraintBottom_toBottomOf="parent"
-    app:layout_constraintStart_toEndOf="@id/guess_controls"
-    app:layout_constraintHorizontal_weight="3"/>
-
-</androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
